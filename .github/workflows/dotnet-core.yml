name: .NET Core

on:
  push:
    branches:
      - "**"
    tags:
      - v*
    paths:
      - "**"
      - "!**.md"
  pull_request:
    paths:
      - "**"
      - "!**.md"


env:
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
    lint:
      name: Lint
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Setup .NET Core SDK
          uses: actions/setup-dotnet@v1.7.2
          with:
            dotnet-version: 5.0.100
        - name: Restore Tool
          run: dotnet tool restore
        - name: Add Problem Matcher for dotnet-format
          uses: xt0rted/dotnet-format-problem-matcher@v1
        - name: Lint
          run: dotnet format --check --dry-run

    build-and-test:
        name: Debug Build & Test
        runs-on: ${{ matrix.os }}
        strategy:
          matrix:
            os: [ubuntu-latest, windows-latest]
            dotnet: [ { sdk: "5.0", framework: "net5.0" } ]

        steps:
          - uses: actions/checkout@v2
          - uses: actions/cache@v2.1.3
            with:
              path: ${{ env.NUGET_PACKAGES }}
              key: ${{ runner.os }}-nuget-${{ matrix.dotnet.sdk }}-${{ hashFiles('**/packages.lock.json') }}
              restore-keys: |
                ${{ runner.os }}-nuget-${{ matrix.dotnet.sdk }}-
                ${{ runner.os }}-nuget-

          - name: Setup .NET Core ${{ matrix.dotnet.sdk }} SDK
            uses: actions/setup-dotnet@v1.7.2
            with:
              dotnet-version: ${{ matrix.dotnet.sdk }}

          - name: Restore
            run: dotnet restore --locked-mode
          - name: Build
            run: dotnet build --no-restore -f ${{ matrix.dotnet.framework }}
          - name: Test
            run: dotnet test --no-build -f ${{ matrix.dotnet.framework }} --settings coverlet.runsettings

          - name: Upload coverage to Codecov
            uses: codecov/codecov-action@v1
            with:
              file: "!**/.nuget/packages/**/*.*"
              flags: ${{ runner.os }},${{ matrix.dotnet.framework }}

    release:
      name: Create Github Release
      if: contains(github.ref, 'tags/v')
      needs: [lint, build-and-test]
      runs-on: ubuntu-latest
      steps:
        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ github.ref }}
            release_name: Release ${{ github.ref }}
            draft: false
            prerelease: false
        - name: Output Release URL File
          run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
        - name: Save Release URL File for publish
          uses: actions/upload-artifact@v2.2.1
          with:
            name: release_url
            path: release_url.txt
